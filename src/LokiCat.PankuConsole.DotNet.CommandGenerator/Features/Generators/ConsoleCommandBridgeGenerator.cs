using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace LokiCat.PankuConsole.DotNet.CommandGenerator.Features.Generators;

[Generator(LanguageNames.CSharp)]
public sealed class ConsoleCommandBridgeGenerator : IIncrementalGenerator {
    public void Initialize(IncrementalGeneratorInitializationContext context) {
        var methodsWithAttr = context.SyntaxProvider
                                     .CreateSyntaxProvider(
                                         predicate: static (node, _) =>
                                             node is MethodDeclarationSyntax m && m.AttributeLists.Count > 0,
                                         transform: static (ctx, _) => GetConsoleCommandInfo(ctx))
                                     .Where(static m => m is not null);

        context.RegisterSourceOutput(methodsWithAttr.Collect(), EmitGDScript);

        context.RegisterPostInitializationOutput(ctx => {
            ctx.AddSource("ConsoleCommandAttribute.g.cs", """
                                                            // <auto-generated />
                                                            using System;
                                                            
                                                            namespace LokiCat.PankuConsoleBridge {
                                                              /// <summary>
                                                              /// Marks a method to be exposed to the PankuConsole.
                                                              /// </summary>
                                                              [AttributeUsage(AttributeTargets.Method)]
                                                              public sealed class ConsoleCommandAttribute : Attribute {
                                                                public string? CommandName { get; }
                                                                public ConsoleCommandAttribute(string? commandName = null) {
                                                                  CommandName = commandName;
                                                                }
                                                              }
                                                            }
                                                          """);
        });
    }

    private static ConsoleCommandInfo? GetConsoleCommandInfo(GeneratorSyntaxContext context) {
        var methodSyntax = (MethodDeclarationSyntax)context.Node;
        var semanticModel = context.SemanticModel;
        var methodSymbol = semanticModel.GetDeclaredSymbol(methodSyntax) as IMethodSymbol;
        if (methodSymbol is null)
        {
            return null;
        }

        var attr = methodSymbol.GetAttributes()
                               .FirstOrDefault(ad => ad.AttributeClass?.ToDisplayString() == "LokiCat.PankuConsoleBridge.ConsoleCommandAttribute");
        if (attr is null)
        {
            return null;
        }

        var classSymbol = methodSymbol.ContainingType;
        var commandName = attr.ConstructorArguments.FirstOrDefault().Value as string;

        var parameters = methodSymbol.Parameters
                                     .Select(p => new ConsoleCommandParameter(p.Name, p.Type.ToDisplayString(), p.HasExplicitDefaultValue, p.ExplicitDefaultValue))
                                     .ToList();

        return new ConsoleCommandInfo(
            ClassName: classSymbol.Name,
            MethodName: methodSymbol.Name,
            IsAsync: methodSymbol.IsAsync,
            Parameters: parameters,
            CustomName: commandName
        );
    }

    private static void EmitGDScript(SourceProductionContext context, ImmutableArray<ConsoleCommandInfo?> commandsRaw) {
        var commands = commandsRaw!.OfType<ConsoleCommandInfo>().ToList();
        var sb = new StringBuilder();
        sb.AppendLine("extends Node");
        sb.AppendLine("class_name ConsoleBridge\n");

        foreach (var cls in commands.Select(c => c.ClassName).Distinct())
        {
            sb.AppendLine($"@onready var {cls} = get_node(\"%{cls}\")");
        }

        foreach (var cmd in commands) {
            var baseName = cmd.CustomName ?? $"{ToSnakeCase(cmd.ClassName)}.{cmd.MethodName}";
            var overloads = GetOverloads(cmd);
            foreach (var overload in overloads) {
                sb.AppendLine();
                sb.AppendLine("@panku_command");
                sb.AppendLine($"func {baseName}({FormatParams(overload)}):");
                sb.Append("    ");
                if (cmd.IsAsync)
                {
                    sb.Append("await ");
                }

                sb.Append($"{cmd.ClassName}.{cmd.MethodName}({FormatArgs(overload)})\n");
            }
        }

        context.AddSource("ConsoleBridge.gd", sb.ToString());
    }

    private static List<List<ConsoleCommandParameter>> GetOverloads(ConsoleCommandInfo cmd) {
        var result = new List<List<ConsoleCommandParameter>>();
        var parameters = cmd.Parameters;
        var requiredCount = parameters.TakeWhile(p => !p.HasDefault).Count();
        for (var i = parameters.Count; i >= requiredCount; i--)
        {
            result.Add(parameters.Take(i).ToList());
        }

        return result;
    }

    private static string FormatParams(List<ConsoleCommandParameter> parameters) =>
        string.Join(", ", parameters.Select(p => $"{p.Name}: {ToGDScriptType(p.Type)}"));

    private static string FormatArgs(List<ConsoleCommandParameter> parameters) =>
        string.Join(", ", parameters.Select(p => p.HasDefault ? p.Name + " ?? " + FormatDefault(p.DefaultValue) : p.Name));

    private static string ToSnakeCase(string input) =>
        string.Concat(input.Select((c, i) => i > 0 && char.IsUpper(c) ? "_" + char.ToLower(c) : char.ToLower(c).ToString()));

    private static string ToGDScriptType(string type) => type switch {
        "System.String" or "string" => "String",
        "System.Int32" or "int" => "int",
        "System.Single" or "float" => "float",
        "System.Boolean" or "bool" => "bool",
        _ => "Variant"
    };

    private static string FormatDefault(object? value) => value switch {
        null => "null",
        string s => $"\"{s}\"",
        bool b => b.ToString().ToLower(),
        _ => value.ToString() ?? "null"
    };

    private record ConsoleCommandInfo(
        string ClassName,
        string MethodName,
        bool IsAsync,
        List<ConsoleCommandParameter> Parameters,
        string? CustomName
    );

    private record ConsoleCommandParameter(
        string Name,
        string Type,
        bool HasDefault,
        object? DefaultValue
    );
}